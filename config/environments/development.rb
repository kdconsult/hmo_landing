require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true
    config.public_file_server.headers = { "cache-control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
  end

  # Change to :null_store to avoid any caching.
  config.cache_store = :memory_store

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Show delivery errors in dev for easier debugging.
  config.action_mailer.raise_delivery_errors = true

  # Make template changes take effect immediately.
  config.action_mailer.perform_caching = false

  # Set localhost to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: ENV.fetch("APP_HOST", "localhost"), port: (ENV["APP_PORT"] || 3000).to_i }

  # Use SMTP in development when credentials/env are present; fallback to :letter_opener or :smtp with localhost if desired.
  if ENV["SMTP_ADDRESS"].present? || (Rails.application.credentials.dig(:smtp, :address) rescue nil)
    config.action_mailer.delivery_method = :smtp
    config.action_mailer.smtp_settings = {
      address:              ENV["SMTP_ADDRESS"].presence || (Rails.application.credentials.dig(:smtp, :address) rescue nil),
      port:                 (ENV["SMTP_PORT"].presence || (Rails.application.credentials.dig(:smtp, :port) rescue nil) || 587).to_i,
      domain:               ENV["SMTP_DOMAIN"].presence || (Rails.application.credentials.dig(:smtp, :domain) rescue nil),
      user_name:            ENV["SMTP_USERNAME"].presence || (Rails.application.credentials.dig(:smtp, :user_name) rescue nil),
      password:             ENV["SMTP_PASSWORD"].presence || (Rails.application.credentials.dig(:smtp, :password) rescue nil),
      authentication:       (ENV["SMTP_AUTH"].presence || (Rails.application.credentials.dig(:smtp, :authentication) rescue nil) || :plain).to_sym,
      enable_starttls_auto: ActiveModel::Type::Boolean.new.cast(ENV.fetch("SMTP_STARTTLS", "true"))
    }
  else
    # Default to :smtp at localhost:1025 if running MailHog/Mailcatcher, otherwise test logs will show deliveries
    config.action_mailer.delivery_method = :smtp
    config.action_mailer.smtp_settings = { address: "localhost", port: 1025 }
  end

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!
end
